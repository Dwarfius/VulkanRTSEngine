#version 420

in vec2 uvsOut;

uniform sampler2D prevFrame;

layout(location = 0) out vec4 finalColor;
layout(location = 1) out vec4 outColor;

layout (std140, binding = 0) uniform PainterAdapter
{
    mat4 MVP;
    vec2 TexSize;
    vec2 MousePos;
    vec2 GridCellSize;
    int IsDrawing;
    float BrushSize;
};

bool IsNearMouse()
{
    vec2 mouseRel = MousePos / TexSize;
    mouseRel.x = clamp(mouseRel.x, 0, 1);
    mouseRel.y = clamp(mouseRel.y, 0, 1);
    float dist = distance(uvsOut, mouseRel);
    return dist < BrushSize;
}

vec4 GetPaintColor(bool aIsInside)
{
    if(IsDrawing > 0)
    {
        // color pixel under mouse white, otherwise black
        return aIsInside ? 
            (IsDrawing == 1 ? vec4(1, 1, 1, 1) : -vec4(1, 1, 1, 0)) : 
            vec4(0, 0, 0, 1);
    }
    else if(IsDrawing == -1)
    {
        return -vec4(1, 1, 1, 0);
    }
    else
    {
        return vec4(0, 0, 0, 1);
    }
}

vec4 GetMousePointerColor(bool aIsInside, bool aIsGrid)
{
    return aIsInside && !aIsGrid ? vec4(0, 0, 1, 1) : vec4(0, 0, 0, 0);
}

bool ApproxEqual(float a, float b, float sigma)
{
    return abs(b - a) < sigma;
}

bool IsGridPixel()
{
    return int(mod(gl_FragCoord.x, GridCellSize.x)) == 0
        || int(mod(gl_FragCoord.y, GridCellSize.y)) == 0;
}

vec4 GetGridColor(bool aIsGrid, vec4 aBaseColor)
{
    return aIsGrid ? vec4(0.5, 0.5, 0.5, 1) : aBaseColor;
}

void main() 
{
    bool isInside = IsNearMouse();

    vec4 paintColor = GetPaintColor(isInside);
    vec4 baseColor = texture(prevFrame, uvsOut);
    outColor = baseColor + paintColor;

    bool isGrid = IsGridPixel();
    vec4 baseColorWithPointer = outColor + GetMousePointerColor(isInside, isGrid);
    finalColor = GetGridColor(isGrid, baseColorWithPointer);
}