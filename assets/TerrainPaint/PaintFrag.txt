#version 420

in vec2 uvsOut;

uniform sampler2D prevFrame;
// TODO: this requires z prefix to force it
// to be second in order (as it seems to be sorted
// alphabetically when using glGetActiveUniform)
uniform sampler2D zpaintTexture; 

layout(location = 0) out vec4 finalColor;
layout(location = 1) out vec4 outColor;

layout (std140, binding = 0) uniform PainterAdapter
{
    mat4 MVP;
    vec4 Color;
    vec2 CanvasSize;
    vec2 TexSize;
    vec2 MousePosStart;
    vec2 MousePosEnd;
    vec2 GridCellSize;
    vec2 TextureSize;
    int DrawingMode;
    int BrushSize;
};

float distanceSqr(vec2 aStart, vec2 aEnd)
{
    vec2 dist = aEnd - aStart;
    return dot(dist, dist);
}

bool IsNearMouse()
{
    vec2 mStart = MousePosStart;
    mStart.x = clamp(mStart.x, 0, TexSize.x);
    mStart.y = clamp(mStart.y, 0, TexSize.y);
    mStart = floor(mStart);

    vec2 mEnd = MousePosEnd;
    mEnd.x = clamp(mEnd.x, 0, TexSize.x);
    mEnd.y = clamp(mEnd.y, 0, TexSize.y);
    mEnd = floor(mEnd);

    vec2 pixelPos = uvsOut * TexSize;
    pixelPos = floor(pixelPos);

    float lineDistSqr = distanceSqr(mStart, mEnd);
    if(lineDistSqr != 0)
    {
        float t = max(0, min(1, dot(pixelPos - mStart, mEnd - mStart) / lineDistSqr));
        vec2 projOnLine = mStart + t * (mEnd - mStart);
        return distance(projOnLine, pixelPos) < (BrushSize - 0.5f);
    }
    else
    {
        return distance(pixelPos, mEnd) < (BrushSize - 0.5f);
    }
}

vec4 ApplyPaintColor(bool aIsInside, vec4 aBaseColor)
{
    if(DrawingMode == 1)
    {
        return aIsInside ? vec4(Color.xyz, 1) : aBaseColor;
    }
    else if(DrawingMode == 2)
    {
        vec2 uvs;
        uvs.x = mod(gl_FragCoord.x, TextureSize.x) / TextureSize.x;
        uvs.y = 1 - mod(gl_FragCoord.y, TextureSize.y) / TextureSize.y;
        vec4 color = texture(zpaintTexture, uvs);
        return aIsInside ? color : aBaseColor;
    }
    else if(DrawingMode == -1)
    {
        return vec4(0);
    }
    else if(DrawingMode == -2)
    {
        return aIsInside ? vec4(0) : aBaseColor;
    }
    return aBaseColor;
}

vec4 GetMousePointerColor(bool aIsInside, vec4 aBaseColor)
{
    return aIsInside ? vec4(Color.xyz, 1) : aBaseColor;
}

void main() 
{
    bool isInside = IsNearMouse();
    vec4 baseColor = texture(prevFrame, uvsOut);
    outColor = ApplyPaintColor(isInside, baseColor);

    finalColor = GetMousePointerColor(isInside, outColor);
}