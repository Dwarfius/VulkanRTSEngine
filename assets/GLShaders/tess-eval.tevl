#version 420
#extension GL_ARB_separate_shader_objects : enable

layout(quads, fractional_even_spacing, cw) in;

layout (std140, binding = 0) uniform ObjectMatricesAdapter
{
	mat4 Model;
	mat4 ModelView;
	mat4 MVP;
};

layout (std140, binding = 1) uniform TerrainAdapter
{
	vec3 GridOrigin;
	float TileSize;
	int GridWidth;
	int GridHeight;
	float YScale;
};

layout(location = 0) in DataIn
{
	vec2 TexCoords;
	int TessLevel[4]; // left, bottom, right, top
	int CheckerInd;
} In[];

layout(location = 0) out DataOut
{
	vec2 TexCoords;
	int TessLevel;
	float DistFromCenter;
	int CheckerInd;
} Out;

uniform sampler2D TexHeightmap;

void main()
{
	// only have 1 control point
	vec3 pos = gl_in[0].gl_Position.xyz;
    pos.xz += (gl_TessCoord.xy - 0.5f) * TileSize;
    vec2 uv = In[0].TexCoords + vec2(gl_TessCoord.x / GridWidth, gl_TessCoord.y / GridHeight);
    pos.y = texture2D(TexHeightmap, uv).x * YScale;
    gl_Position = MVP * vec4(pos, 1);

    Out.DistFromCenter = distance(gl_in[0].gl_Position.xyz, pos);
    Out.TexCoords.xy = uv;
    Out.CheckerInd = In[0].CheckerInd;

    float tessHor = mix(In[0].TessLevel[0], In[0].TessLevel[2], gl_TessCoord.x);
    float tessVert = mix(In[0].TessLevel[1], In[0].TessLevel[3], gl_TessCoord.y);
    Out.TessLevel = int((tessHor + tessVert) / 2);
}