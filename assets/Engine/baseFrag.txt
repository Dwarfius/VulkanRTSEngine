#version 420
#include "Engine/Adapters/CameraAdapter.txt"
#include "Engine/Adapters/LightAdapter.txt"

in vec3 fragPosOut;
in vec3 normalOut;
in vec2 uvsOut;

uniform sampler2D tex;

layout(location = 0) out vec4 outColor;

layout (std140, binding = 5) uniform CameraAdapter;
layout (std140, binding = 2) uniform LightAdapter;

void main() 
{
    const vec3 normal = normalize(normalOut);
    const vec3 viewDir = normalize(CamPos.xyz - fragPosOut);

    vec3 resColor = vec3(0);
    for(int i=0; i<Count; i++)
    {
        int type = int(ColorType[i].w);
        if(type == 0)
        {
            Light light = GetLight(i);
            resColor += CalcPointLight(light, fragPosOut, normal, viewDir, uvsOut, tex);
        }
        else if(type == 1)
        {
            Light light = GetLight(i);
            resColor += CalcSpotLight(light, fragPosOut, normal, viewDir, uvsOut, tex);
        }
        else
        {
            DirectLight light = GetDirLight(i);
            resColor += CalcDirLight(light, normal, viewDir, uvsOut, tex);
        }
    }
    outColor = vec4(resColor, 1.0);
}